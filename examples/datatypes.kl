#lang kernel

(datatype (Nat)
  (zero)
  (add1 (Nat)))

(datatype (List A)
  (nil)
  (:: A (List A)))

(datatype (Tree A)
  (leaf)
  (branch A (Tree A) A))

(datatype (Either A B)
  (left A)
  (right B))

(define nothing (zero))

(define something (add1 (add1 (zero))))

(example (left (branch (zero) (leaf) (add1 (zero)))))
(example (right (right (right (nil)))))


(define double
  (flet (f (n)
          (case n
            [(zero) (zero)]
            [(add1 k) (add1 (add1 (f k)))]))
    f))

(example (double (add1 (add1 (zero)))))

(define flop
  (lambda (either)
    (case either
      [(left a) (right a)]
      [(right b) (left b)])))

(example (flop (left #true)))
(example (flop (right (:: (add1 (zero)) (nil)))))

(define plus
  (flet (f (n)
          (case n
            [(zero) (lambda (k) k)]
            [(add1 n*) (lambda (k) ((f n*) (add1 k)))]))
    f))

(example ((plus (add1 (add1 (zero)))) (add1 (add1 (add1 (zero))))))

(export Nat zero add1)
