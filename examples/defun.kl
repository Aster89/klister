#lang "n-ary-app.kl"
[import [shift "n-ary-app.kl" 1]]


[define fix
  [lambda (fun)
    ([lambda (rec) (fun [lambda (x) (rec rec x)])]
     [lambda (rec) (fun [lambda (x) (rec rec x)])])]]

[define-macros
  -- (defun f (x y z)
  --   (... (f foo bar baz) ...))
  -- =>
  -- (define f
  --   (fix (lambda (f)
  --          (lambda (x y z)
  --            ... (f foo bar baz) ...))))
  ([defun
    [lambda (stx)
      (syntax-case stx
        [[list [_ f args body]]
         (pure (list-syntax ('define f (list-syntax ('fix (list-syntax ('lambda (list-syntax (f) f) (list-syntax ('lambda args body) stx)) stx)) stx)) stx))]
        [_ (syntax-error '"bad syntax" stx)])]])]

[defun const (x y) x]

[example (const 'a 'b)]

[defun last-stx (stx)
  (syntax-case stx
    [[cons a d]
     (syntax-case d
       [() a]
       [_ (last-stx d)])]  -- note that this is a recursive call to last-stx, whereas earlier (e.g. in n-ary-app.kl)
                           -- we'd have to return the syntax of a macro call to last-stx.
    [_ stx])]

[example (last-stx '(a b c d e f g))]

[export defun]
