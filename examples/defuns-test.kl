#lang "prelude.kl"
(import "defuns.kl")
(import "list.kl")
(import "either-datatype.kl")
(import "pair-datatype.kl")


(defuns
  [even? (n)
   (if (= n 0) true (odd? (- n 1)))]
  [odd? (n)
   (if (= n 0) false (even? (- n 1)))])

-- (list (false) (true) (false) (true) (false))
(example (map even? (list 1 2 3 4 5)))

-- (list (true) (false) (true) (false) (true))
(example (map odd? (list 1 2 3 4 5)))


-- exercise the edge case in which only one function is defined.
(defuns
  [fact (n)
   (if (= n 0) 1 (* n (fact (- n 1))))])

-- (list 1 2 6 24 120)
(example
  (map fact (list 1 2 3 4 5)))


-- exercise the edge case in which zero functions are defined.
(defuns)


-- exercise a more complicated case, with more than two functions taking more than one argument.
(defuns
  [collatz (n)
   (go n 0)]
  [go (n steps)
   (if (= n 1)
       steps
       (if (even? n)
           (go-even n steps)
           (go-odd n steps)))]
  [go-even (n steps)
   (go (/ n 2)
       (+ steps 1))]
  [go-odd (n steps)
   (go (+ (* 3 n) 1)
       (+ steps 1))])

-- (list 0 1 7 2 5)
(example
  (map collatz (list 1 2 3 4 5)))
