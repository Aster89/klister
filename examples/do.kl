#lang "n-ary-app.kl"

(import (shift "n-ary-app.kl" 1))
(import (shift "quasiquote.kl" 1))

(define-macros
  -- (do (x <- foo)
  --     (bar x)
  --     (y <- baz x)
  --     (quux x y))
  -- =>
  -- (>>= foo (lambda (x)
  --            (>>= (bar x) (lambda (_)
  --                           (>>= (baz x) (lambda (y)
  --                                          (quux x y)))))))
  ((<-
    (lambda (stx)
      (syntax-error (quote "<- used out of context") stx)))
   (do (lambda (stx)
         (syntax-case stx
          ((cons _ all-actions)
           (syntax-case all-actions
             ((list (last-action))
              (pure last-action))
             ((cons first-action actions)
              (syntax-case first-action
                ((list (var <-? action))
                 (>>= (free-identifier=? '<- <-?)
                      (lambda (isArrow)
                              (if isArrow
                                  (pure `(>>= ,action (lambda (,var)
                                                        ,(cons-list-syntax 'do actions stx))))
                                  (syntax-error '"syntax error in do")))))
                ((list (action))
                 (pure `(>>= ,action (lambda (_)
                                       ,(cons-list-syntax 'do actions stx))))))))))))))

(export <- do)
