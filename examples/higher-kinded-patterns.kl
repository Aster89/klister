#lang "prelude.kl"

(import (shift "prelude.kl" 1))
(import (shift "either-datatype.kl" 1))
(import (shift "higher-kinded.kl" 1))
(import "define-syntax-rule.kl")
(import "either-datatype.kl")
(import "higher-kinded.kl")

(define-macro (type-of)
  (>>= (which-problem)
    (lambda (problem)
      (case problem
        [(expression of-unit-t-arrow-string?)
         (type-case of-unit-t-arrow-string?
           [(-> of-unit-t? string?)
            (type-case of-unit-t?
              [(OfUnit type)
               (type-case type
                 [(IO)
                  (pure '(const "OfUnit IO"))]
                 [(Maybe)
                  (pure '(const "OfUnit Maybe"))]
                 [(Either unit?)
                  (type-case unit?
                    [(Unit)
                     (pure '(const "OfUnit (Either Unit)"))]
                    [(else _)
                     (pure '(const "OfUnit (Either ?)"))])]
                 [(else _)
                  (pure '(const "OfUnit ?"))])]
              [(else _)
               (pure '(const "?"))])])]))))

(example
  ((type-of)
   (of-unit (pure-IO unit))))
(example
  ((type-of)
   (of-unit (just unit))))
(example
  ((type-of)
   (of-unit (left unit))))
