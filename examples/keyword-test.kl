#lang "prelude.kl"

(import "define-syntax-rule.kl")
(import "keyword.kl")
(import (shift "prelude.kl" 1))
(import (shift "do.kl" 1))
(import (shift "quasiquote.kl" 1))

(define-keyword my-then)
(define-keyword my-else)

(define-macro (my-if cond my-then-ish then-part my-else-ish else-part)
  (do (my-then? <- (keyword=? my-then-ish 'my-then))
      (my-else? <- (keyword=? my-else-ish 'my-else))
      (if my-then?
          (if my-else?
              (pure `(if ,cond ,then-part ,else-part))
              (syntax-error '(my-if: expected my-else)))
          (syntax-error '(my-if: expected my-then)))))

(example
  (my-if (= (+ 2 2) 4)
    my-then "math works"
    my-else "math is broken"))

(export my-if my-then my-else)
