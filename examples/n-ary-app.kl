#lang kernel

[import [shift (only kernel cons-list-syntax lambda pure quote syntax-case list-syntax export import) 1]]



[define-macros
  ([my-app
    [lambda [stx]
      (syntax-case stx
        [[cons _ fun-and-args]
         (syntax-case fun-and-args
           [[cons fun args]
            (syntax-case args
              [() [pure fun]]
              [[cons arg0 more-args]
               [pure
                [cons-list-syntax
                  [quote my-app]
                  [cons-list-syntax
                    [list-syntax [[quote #%app] fun arg0] stx]
                    more-args
                    stx]
                  stx]]])])])]]
   [my-lam
    [lambda [stx]
     (syntax-case stx
       [[list [_ args body]]
        (syntax-case args
          [() [pure body]]
          [[cons arg0 more-args]
           [pure [list-syntax [[quote lambda]
                               [list-syntax [arg0] arg0]
                               [list-syntax [[quote my-lam] more-args body] stx]]
                           stx]]]
          [[list [arg]]
           [pure [list-syntax [[quote lambda] args body] stx]]])])]])]

[define-macros
  ([#%app
    [lambda [stx]
     (syntax-case stx
      [[cons _ args]
       [pure [cons-list-syntax [quote my-app] args stx]]])]])]

[define-macros
  ([lambda
    [lambda [stx]
     (syntax-case stx
      [[list [_ args body]]
       [pure [list-syntax [[quote my-lam] args body] stx]]])]])]

[define id [lambda (x) x]]

[define const [lambda (x y) x]]

[example (const [quote a] [quote b])]

[define compose [lambda (f g x) (f (g x))]]

[example (compose id)]
[example (compose id id)]
[example (compose id id id)]

[meta [export import]]
[export #%module]
[export #%app]
[export const]
[export lambda]
[export define]
[export example]
[export define-macros]
[export quote]
[export meta]
[export import]
[export >>=]
[export pure]
[export if]
[export syntax-error]
[export syntax-case]
[export list-syntax]
[export cons-list-syntax]
[export empty-list-syntax]
[export free-identifier=?]
[export log]
[export export]
